package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"flint/graph/model"
	"flint/internal/middleware"
	"fmt"
)

// UpdateCustomerAndUser is the resolver for the updateCustomerAndUser field.
func (r *mutationResolver) UpdateCustomerAndUser(ctx context.Context, input model.UpdateCustomerAndUserInput) (*model.Customer, error) {
	customer, err := r.customerService.UpdateCustomerAndUser(ctx, input)
	if err != nil {
		return nil, err
	}
	var domain *string
	if customer.Domain.Valid {
		domain = &customer.Domain.String
	} else {
		domain = nil
	}
	return &model.Customer{
		Domain:               domain,
		IsVerified:           &customer.CreatedAt.Valid,
		OnboardingCompletion: &customer.OnboardingCompletion.Bool,
	}, nil
}

// GetCustomer is the resolver for the getCustomer field.
func (r *queryResolver) GetCustomer(ctx context.Context) (*model.Customer, error) {
	// panic(fmt.Errorf("not implemented: GetCustomer - getCustomer"))
	user := ctx.Value(middleware.UserContextKey).(*middleware.User)
	fmt.Println("GetCustomerhreee", user, user.CustomerUID)
	// fmt.Println("GetCustomer", input.CustomerUID)
	// parsedCustomerUID, err := (user.CustomerUID)
	// if err != nil {
	// 	return nil, err
	// }
	fmt.Println("parsedCustomerUID", user.CustomerUID)
	customer, err := r.customerService.GetCustomer(ctx, user.CustomerUID)
	if err != nil {
		return nil, err
	}
	var domain *string
	if customer.Domain.Valid {
		domain = &customer.Domain.String
	} else {
		domain = nil
	}
	return &model.Customer{
		Domain:               domain,
		IsVerified:           &customer.CreatedAt.Valid,
		OnboardingCompletion: &customer.OnboardingCompletion.Bool,
	}, nil
}
