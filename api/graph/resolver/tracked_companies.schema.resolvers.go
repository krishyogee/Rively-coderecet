package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"flint/graph/model"
	"fmt"
)

// CreateTrackedCompany is the resolver for the createTrackedCompany field.
func (r *mutationResolver) CreateTrackedCompany(ctx context.Context, input []*model.CreateTrackedCompanyInput) ([]*model.TrackedCompany, error) {
	// Initialize slice with exact capacity
	trackedCompanies := make([]*model.TrackedCompany, 0, len(input))

	for _, companyInput := range input {
		// Validate input (optional but recommended)
		if companyInput == nil {
			return nil, fmt.Errorf("nil input detected")
		}

		trackedCompany, err := r.trackedCompanyService.CreateTrackedCompany(ctx, *companyInput)
		if err != nil {
			return nil, fmt.Errorf("failed to create company %s: %w", companyInput.Name, err)
		}

		trackedCompanies = append(trackedCompanies, trackedCompany)
	}

	return trackedCompanies, nil
}

// DeleteTrackedCompany is the resolver for the deleteTrackedCompany field.
func (r *mutationResolver) DeleteTrackedCompany(ctx context.Context, input model.DeleteTrackedCompanyInput) (bool, error) {
	success, err := r.trackedCompanyService.DeleteTrackedCompany(ctx, input)
	if err != nil {
		return false, fmt.Errorf("failed to delete tracked company: %w", err)
	}
	return success, nil
}

// UpdateTrackedCompany is the resolver for the updateTrackedCompany field.
func (r *mutationResolver) UpdateTrackedCompany(ctx context.Context, input model.UpdateTrackedCompanyInput) (*model.TrackedCompany, error) {
	tracked_company, err := r.trackedCompanyService.UpdateTrackedCompany(ctx, input)
	if err != nil {
		return nil, fmt.Errorf("failed to update tracked company: %w", err)
	}
	return tracked_company, nil
}

// GetTrackedCompanies is the resolver for the getTrackedCompanies field.
func (r *queryResolver) GetTrackedCompanies(ctx context.Context) ([]*model.TrackedCompany, error) {
	tracked_companies, err := r.trackedCompanyService.GetAllTrackedCompanies(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tracked companies: %w", err)
	}
	return tracked_companies, nil
}
