// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_recipients.sql

package email_recipients

import (
	"context"

	"github.com/google/uuid"
)

const createEmailRecipient = `-- name: CreateEmailRecipient :one
INSERT INTO email_recipients (name, email, department_uid, customer_uid)
VALUES ($1, $2, $3, $4)
RETURNING id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
`

type CreateEmailRecipientParams struct {
	Name          string    `json:"name"`
	Email         string    `json:"email"`
	DepartmentUid uuid.UUID `json:"department_uid"`
	CustomerUid   uuid.UUID `json:"customer_uid"`
}

func (q *Queries) CreateEmailRecipient(ctx context.Context, arg CreateEmailRecipientParams) (EmailRecipient, error) {
	row := q.db.QueryRowContext(ctx, createEmailRecipient,
		arg.Name,
		arg.Email,
		arg.DepartmentUid,
		arg.CustomerUid,
	)
	var i EmailRecipient
	err := row.Scan(
		&i.ID,
		&i.EmailRecipientUid,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DepartmentUid,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmailRecipient = `-- name: DeleteEmailRecipient :exec
DELETE FROM email_recipients
WHERE email_recipient_uid = $1
`

func (q *Queries) DeleteEmailRecipient(ctx context.Context, emailRecipientUid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailRecipient, emailRecipientUid)
	return err
}

const getEmailRecipientByEmail = `-- name: GetEmailRecipientByEmail :one
SELECT id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
FROM email_recipients
WHERE email = $1
`

func (q *Queries) GetEmailRecipientByEmail(ctx context.Context, email string) (EmailRecipient, error) {
	row := q.db.QueryRowContext(ctx, getEmailRecipientByEmail, email)
	var i EmailRecipient
	err := row.Scan(
		&i.ID,
		&i.EmailRecipientUid,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DepartmentUid,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailRecipientById = `-- name: GetEmailRecipientById :one
SELECT id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
FROM email_recipients
WHERE id = $1
`

func (q *Queries) GetEmailRecipientById(ctx context.Context, id int32) (EmailRecipient, error) {
	row := q.db.QueryRowContext(ctx, getEmailRecipientById, id)
	var i EmailRecipient
	err := row.Scan(
		&i.ID,
		&i.EmailRecipientUid,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DepartmentUid,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailRecipientByUID = `-- name: GetEmailRecipientByUID :one
SELECT id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
FROM email_recipients
WHERE email_recipient_uid = $1
`

func (q *Queries) GetEmailRecipientByUID(ctx context.Context, emailRecipientUid uuid.UUID) (EmailRecipient, error) {
	row := q.db.QueryRowContext(ctx, getEmailRecipientByUID, emailRecipientUid)
	var i EmailRecipient
	err := row.Scan(
		&i.ID,
		&i.EmailRecipientUid,
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.DepartmentUid,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const listEmailRecipientsByCustomer = `-- name: ListEmailRecipientsByCustomer :many
SELECT id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
FROM email_recipients
WHERE customer_uid = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEmailRecipientsByCustomer(ctx context.Context, customerUid uuid.UUID) ([]EmailRecipient, error) {
	rows, err := q.db.QueryContext(ctx, listEmailRecipientsByCustomer, customerUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailRecipient
	for rows.Next() {
		var i EmailRecipient
		if err := rows.Scan(
			&i.ID,
			&i.EmailRecipientUid,
			&i.Name,
			&i.Email,
			&i.IsActive,
			&i.DepartmentUid,
			&i.CustomerUid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmailRecipientsByDepartment = `-- name: ListEmailRecipientsByDepartment :many
SELECT id, email_recipient_uid, name, email, is_active, department_uid, customer_uid, created_at
FROM email_recipients
WHERE department_uid = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEmailRecipientsByDepartment(ctx context.Context, departmentUid uuid.UUID) ([]EmailRecipient, error) {
	rows, err := q.db.QueryContext(ctx, listEmailRecipientsByDepartment, departmentUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailRecipient
	for rows.Next() {
		var i EmailRecipient
		if err := rows.Scan(
			&i.ID,
			&i.EmailRecipientUid,
			&i.Name,
			&i.Email,
			&i.IsActive,
			&i.DepartmentUid,
			&i.CustomerUid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailRecipient = `-- name: UpdateEmailRecipient :exec
UPDATE email_recipients
SET name = COALESCE($2, name),
    email = COALESCE($3, email),
    is_active = COALESCE($4, is_active),
    department_uid = COALESCE($5, department_uid)
WHERE email_recipient_uid = $1
`

type UpdateEmailRecipientParams struct {
	EmailRecipientUid uuid.UUID `json:"email_recipient_uid"`
	Name              string    `json:"name"`
	Email             string    `json:"email"`
	IsActive          bool      `json:"is_active"`
	DepartmentUid     uuid.UUID `json:"department_uid"`
}

func (q *Queries) UpdateEmailRecipient(ctx context.Context, arg UpdateEmailRecipientParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailRecipient,
		arg.EmailRecipientUid,
		arg.Name,
		arg.Email,
		arg.IsActive,
		arg.DepartmentUid,
	)
	return err
}
