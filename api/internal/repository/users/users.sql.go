// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package users

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) AS total_users
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var total_users int64
	err := row.Scan(&total_users)
	return total_users, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, email, is_verified, customer_uid, clerk_id)
VALUES (uuid_generate_v4(), $1, $2, $3, $4)
RETURNING id, user_id, clerk_id, email, is_verified, customer_uid, created_at
`

type CreateUserParams struct {
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	ClerkID     sql.NullString `json:"clerk_id"`
}

type CreateUserRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	ClerkID     sql.NullString `json:"clerk_id"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.IsVerified,
		arg.CustomerUid,
		arg.ClerkID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClerkID,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_id, name, email, is_verified, customer_uid, created_at, clerk_id
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	ClerkID     sql.NullString `json:"clerk_id"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
		&i.ClerkID,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, user_id, name, email, is_verified, customer_uid, created_at
FROM users
WHERE user_id = $1
`

type GetUserByUUIDRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUserByUUID(ctx context.Context, userID uuid.UUID) (GetUserByUUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, userID)
	var i GetUserByUUIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_id, name, email, is_verified, customer_uid, created_at
FROM users
ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.IsVerified,
			&i.CustomerUid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByCustomerUID = `-- name: ListUsersByCustomerUID :many
SELECT id, user_id, name, email, is_verified
FROM users
WHERE customer_uid = $1
ORDER BY created_at DESC
`

type ListUsersByCustomerUIDRow struct {
	ID         int32          `json:"id"`
	UserID     uuid.UUID      `json:"user_id"`
	Name       sql.NullString `json:"name"`
	Email      string         `json:"email"`
	IsVerified sql.NullBool   `json:"is_verified"`
}

func (q *Queries) ListUsersByCustomerUID(ctx context.Context, customerUid uuid.NullUUID) ([]ListUsersByCustomerUIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByCustomerUID, customerUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersByCustomerUIDRow
	for rows.Next() {
		var i ListUsersByCustomerUIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, email = $3, is_verified = $4
WHERE id = $1
RETURNING id, user_id, name, email, is_verified, customer_uid, created_at
`

type UpdateUserParams struct {
	ID         int32          `json:"id"`
	Name       sql.NullString `json:"name"`
	Email      string         `json:"email"`
	IsVerified sql.NullBool   `json:"is_verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.IsVerified,
	)
	return err
}

const updateUserClerkID = `-- name: UpdateUserClerkID :one
UPDATE users 
SET clerk_id = $2
WHERE id = $1
RETURNING id, user_id, clerk_id, name, email, is_verified, customer_uid, created_at
`

type UpdateUserClerkIDParams struct {
	ID      int32          `json:"id"`
	ClerkID sql.NullString `json:"clerk_id"`
}

type UpdateUserClerkIDRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	ClerkID     sql.NullString `json:"clerk_id"`
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) UpdateUserClerkID(ctx context.Context, arg UpdateUserClerkIDParams) (UpdateUserClerkIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserClerkID, arg.ID, arg.ClerkID)
	var i UpdateUserClerkIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClerkID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserCustomerID = `-- name: UpdateUserCustomerID :one
UPDATE users 
SET customer_uid = $2
WHERE id = $1
RETURNING id, user_id, name, email, is_verified, customer_uid, created_at
`

type UpdateUserCustomerIDParams struct {
	ID          int32         `json:"id"`
	CustomerUid uuid.NullUUID `json:"customer_uid"`
}

type UpdateUserCustomerIDRow struct {
	ID          int32          `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CustomerUid uuid.NullUUID  `json:"customer_uid"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) UpdateUserCustomerID(ctx context.Context, arg UpdateUserCustomerIDParams) (UpdateUserCustomerIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserCustomerID, arg.ID, arg.CustomerUid)
	var i UpdateUserCustomerIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserNameAndRole = `-- name: UpdateUserNameAndRole :one
UPDATE users
SET name = $2, role = $3
WHERE user_id = $1
RETURNING id, user_id, name, email, is_verified, customer_uid, created_at, role, clerk_id, department_uid
`

type UpdateUserNameAndRoleParams struct {
	UserID uuid.UUID      `json:"user_id"`
	Name   sql.NullString `json:"name"`
	Role   sql.NullString `json:"role"`
}

func (q *Queries) UpdateUserNameAndRole(ctx context.Context, arg UpdateUserNameAndRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNameAndRole, arg.UserID, arg.Name, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.IsVerified,
		&i.CustomerUid,
		&i.CreatedAt,
		&i.Role,
		&i.ClerkID,
		&i.DepartmentUid,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET is_verified = TRUE
WHERE id = $1
RETURNING id, user_id, name, email, is_verified, customer_uid, created_at
`

func (q *Queries) VerifyUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
