// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tracked_companies.sql

package tracked_companies

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTrackedCompany = `-- name: CreateTrackedCompany :one
INSERT INTO tracked_companies (
    name, domain, type, interests, customer_uid
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING  id, tracked_company_uid, name, domain, type, interests, customer_uid, created_at, linkedin_username, changelogs_url, isactive
`

type CreateTrackedCompanyParams struct {
	Name        string    `json:"name"`
	Domain      string    `json:"domain"`
	Type        string    `json:"type"`
	Interests   []string  `json:"interests"`
	CustomerUid uuid.UUID `json:"customer_uid"`
}

func (q *Queries) CreateTrackedCompany(ctx context.Context, arg CreateTrackedCompanyParams) (TrackedCompany, error) {
	row := q.db.QueryRowContext(ctx, createTrackedCompany,
		arg.Name,
		arg.Domain,
		arg.Type,
		pq.Array(arg.Interests),
		arg.CustomerUid,
	)
	var i TrackedCompany
	err := row.Scan(
		&i.ID,
		&i.TrackedCompanyUid,
		&i.Name,
		&i.Domain,
		&i.Type,
		pq.Array(&i.Interests),
		&i.CustomerUid,
		&i.CreatedAt,
		&i.LinkedinUsername,
		&i.ChangelogsUrl,
		&i.Isactive,
	)
	return i, err
}

const deleteTrackedCompany = `-- name: DeleteTrackedCompany :exec
DELETE FROM tracked_companies
WHERE tracked_company_uid = $1
`

func (q *Queries) DeleteTrackedCompany(ctx context.Context, trackedCompanyUid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTrackedCompany, trackedCompanyUid)
	return err
}

const getAllTrackedCompanies = `-- name: GetAllTrackedCompanies :many
SELECT id, tracked_company_uid, name, domain, type, interests, customer_uid, created_at, linkedin_username, changelogs_url, isactive FROM tracked_companies
WHERE customer_uid = $1
`

func (q *Queries) GetAllTrackedCompanies(ctx context.Context, customerUid uuid.UUID) ([]TrackedCompany, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrackedCompanies, customerUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackedCompany
	for rows.Next() {
		var i TrackedCompany
		if err := rows.Scan(
			&i.ID,
			&i.TrackedCompanyUid,
			&i.Name,
			&i.Domain,
			&i.Type,
			pq.Array(&i.Interests),
			&i.CustomerUid,
			&i.CreatedAt,
			&i.LinkedinUsername,
			&i.ChangelogsUrl,
			&i.Isactive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrackedCompany = `-- name: UpdateTrackedCompany :one
UPDATE tracked_companies
SET type = coalesce($2, tracked_companies.type),
    interests = coalesce($3, tracked_companies.interests),
    isactive = coalesce($4, tracked_companies.isactive)
WHERE tracked_company_uid = $1
RETURNING id, tracked_company_uid, name, domain, type, interests, customer_uid, created_at, linkedin_username, changelogs_url, isactive
`

type UpdateTrackedCompanyParams struct {
	TrackedCompanyUid uuid.UUID `json:"tracked_company_uid"`
	Type              string    `json:"type"`
	Interests         []string  `json:"interests"`
	Isactive          bool      `json:"isactive"`
}

func (q *Queries) UpdateTrackedCompany(ctx context.Context, arg UpdateTrackedCompanyParams) (TrackedCompany, error) {
	row := q.db.QueryRowContext(ctx, updateTrackedCompany,
		arg.TrackedCompanyUid,
		arg.Type,
		pq.Array(arg.Interests),
		arg.Isactive,
	)
	var i TrackedCompany
	err := row.Scan(
		&i.ID,
		&i.TrackedCompanyUid,
		&i.Name,
		&i.Domain,
		&i.Type,
		pq.Array(&i.Interests),
		&i.CustomerUid,
		&i.CreatedAt,
		&i.LinkedinUsername,
		&i.ChangelogsUrl,
		&i.Isactive,
	)
	return i, err
}
