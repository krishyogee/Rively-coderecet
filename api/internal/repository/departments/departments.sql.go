// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: departments.sql

package departments

import (
	"context"

	"github.com/google/uuid"
)

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT id, department_uid, name FROM departments
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.DepartmentUid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDepartmentByUID = `-- name: GetDepartmentByUID :one
SELECT id, department_uid, name
FROM departments
WHERE department_uid = $1
`

func (q *Queries) GetDepartmentByUID(ctx context.Context, departmentUid uuid.UUID) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByUID, departmentUid)
	var i Department
	err := row.Scan(&i.ID, &i.DepartmentUid, &i.Name)
	return i, err
}

const getLeadershipUID = `-- name: GetLeadershipUID :one
SELECT department_uid
FROM departments
WHERE name = 'Leadership'
`

func (q *Queries) GetLeadershipUID(ctx context.Context) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getLeadershipUID)
	var department_uid uuid.UUID
	err := row.Scan(&department_uid)
	return department_uid, err
}
