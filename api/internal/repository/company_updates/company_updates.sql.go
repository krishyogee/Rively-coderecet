// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company_updates.sql

package company_updates

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getAllCompanyUpdates = `-- name: GetAllCompanyUpdates :many
SELECT 
  cu.id, cu.company_update_uid, cu.title, cu.description, cu.update_category, cu.update_type, cu.source_type, cu.source_url, cu.posted_at, cu.created_at, cu.action_point, cu.tracked_company_uid, cu.is_saved, 
  tc.domain
FROM 
  company_updates cu
JOIN 
  tracked_companies tc 
  ON cu.tracked_company_uid = tc.tracked_company_uid
WHERE 
  tc.customer_uid = $1
`

type GetAllCompanyUpdatesRow struct {
	ID                int32          `json:"id"`
	CompanyUpdateUid  uuid.UUID      `json:"company_update_uid"`
	Title             string         `json:"title"`
	Description       string         `json:"description"`
	UpdateCategory    string         `json:"update_category"`
	UpdateType        string         `json:"update_type"`
	SourceType        string         `json:"source_type"`
	SourceUrl         string         `json:"source_url"`
	PostedAt          time.Time      `json:"posted_at"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	ActionPoint       sql.NullString `json:"action_point"`
	TrackedCompanyUid uuid.UUID      `json:"tracked_company_uid"`
	IsSaved           sql.NullBool   `json:"is_saved"`
	Domain            string         `json:"domain"`
}

func (q *Queries) GetAllCompanyUpdates(ctx context.Context, customerUid uuid.UUID) ([]GetAllCompanyUpdatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanyUpdates, customerUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCompanyUpdatesRow
	for rows.Next() {
		var i GetAllCompanyUpdatesRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyUpdateUid,
			&i.Title,
			&i.Description,
			&i.UpdateCategory,
			&i.UpdateType,
			&i.SourceType,
			&i.SourceUrl,
			&i.PostedAt,
			&i.CreatedAt,
			&i.ActionPoint,
			&i.TrackedCompanyUid,
			&i.IsSaved,
			&i.Domain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
